import { useState, useEffect } from 'react'
import axios from 'axios'
import './App.css'

// –î–ª—è —Ä–æ–∑—Ä–æ–±–∫–∏: http://localhost:3002/api
// –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É: –∑–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ URL –≤–∞—à–æ–≥–æ —Ö–æ—Å—Ç–∏–Ω–≥—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: https://your-app.vercel.app/api)
const API_URL = import.meta.env.PROD 
  ? 'https://your-app.vercel.app/api'  // –ó–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ –≤–∞—à –¥–æ–º–µ–Ω –ø—ñ—Å–ª—è –¥–µ–ø–ª–æ—é
  : 'http://localhost:3002/api'

function App() {
  const [orders, setOrders] = useState([])
  const [loading, setLoading] = useState(true)

  const formatDate = (dateString) => {
    if (!dateString) return 'N/A'
    const date = new Date(dateString)
    return date.toLocaleDateString('uk-UA', {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit'
    })
  }

  const loadOrders = async () => {
    setLoading(true)
    setError(null)

    try {
      const config = {
        method: 'get',
        maxBodyLength: Infinity,
        url: `${API_URL}/order`,
        headers: { 
          'Authorization': API_TOKEN
        }
      }

      const response = await axios(config)
      setOrders(response.data)
    } catch (err) {
      console.error('Error fetching orders:', err)
      setError(err)
    } finally {
      setLoading(false)
    }
  }

  useEffect(() => {
    loadOrders()
  }, [])

  return (
    <div className="container">
      <div className="header">
        <h1>üñ•Ô∏è VPS Orders Dashboard</h1>
        <p>–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º–∏ VPS —Å–µ—Ä–≤–µ—Ä—ñ–≤</p>
      </div>

      <div className="controls">
        <div className="info-text">
          {loading ? '–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...' : `–í—Å—å–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω—å: ${orders.length}`}
        </div>
        <button 
          className="btn" 
          onClick={loadOrders}
          disabled={loading}
        >
          üîÑ –û–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ
        </button>
      </div>

      <div className="content">
        {loading && (
          <div className="loading">
            <div className="spinner"></div>
            <p>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö...</p>
          </div>
        )}

        {error && (
          <div className="error">
            <h3>‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö</h3>
            <p><strong>–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:</strong> {error.message}</p>
            {error.response && <p><strong>–°—Ç–∞—Ç—É—Å:</strong> {error.response.status}</p>}
            <p>–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ API —Ç–∞ —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó.</p>
          </div>
        )}

        {!loading && !error && orders.length === 0 && (
          <div className="no-data">
            <p>üì≠ –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è</p>
          </div>
        )}

        {!loading && !error && orders.length > 0 && (
          <div className="table-container">
            <table>
              <thead>
                <tr>
                  <th>ID –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è</th>
                  <th>–ü—Ä–æ–¥—É–∫—Ç</th>
                  <th>–û–°</th>
                  <th>–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è</th>
                  <th>–î–∞–Ω—ñ —Å–µ—Ä–≤–µ—Ä–∞</th>
                  <th>–°—Ç–∞—Ç—É—Å</th>
                  <th>–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è</th>
                  <th>–î–∞—Ç–∞ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è</th>
                </tr>
              </thead>
              <tbody>
                {orders.map((order) => (
                  <tr key={order.id}>
                    <td><strong>{order.order_id}</strong></td>
                    <td>
                      <div className="product-info">
                        <span className="product-title">{order.product.title}</span>
                        <span className="product-details">
                          {order.product.type} | {order.product.country} | ${order.product.price}
                        </span>
                      </div>
                    </td>
                    <td>{order.os || 'N/A'}</td>
                    <td>{order.control_panel?.name || 'N/A'}</td>
                    <td>
                      {order.issued_order ? (
                        <div className="server-info">
                          <strong>IP:</strong> {order.issued_order.ip}<br />
                          <strong>Port:</strong> {order.issued_order.port}<br />
                          <strong>User:</strong> {order.issued_order.superuser}<br />
                          <strong>Pass:</strong> {order.issued_order.password}
                        </div>
                      ) : (
                        '–ù–µ –≤–∏–¥–∞–Ω–æ'
                      )}
                    </td>
                    <td>
                      <span className="status-badge status-issued">{order.status}</span>
                    </td>
                    <td>{formatDate(order.date_create)}</td>
                    <td>{formatDate(order.date_end)}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}
      </div>
    </div>
  )
}

export default App
